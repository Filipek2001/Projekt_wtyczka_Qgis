# -*- coding: utf-8 -*-
"""
/***************************************************************************
 Wtyczka_Projekt3Dialog
                                 A QGIS plugin
 Na czym polega działanie wtyczki?
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2023-06-10
        git sha              : $Format:%H$
        copyright            : (C) 2023 by Hubert Mizura
        email                : 01160196@pw.edu.pl
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os
import numpy as np
import math
import operator
from qgis.PyQt import uic
from qgis.PyQt import QtWidgets
from qgis.utils import iface
import PyQt5.QtGui

# This loads your .ui file so that PyQt can populate your plugin with the elements from Qt Designer
FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'wtyczka_projekt_dialog_base.ui'))


class Wtyczka_Projekt3Dialog(QtWidgets.QDialog, FORM_CLASS):
    def __init__(self, parent=None):
        """Constructor."""
        super(Wtyczka_Projekt3Dialog, self).__init__(parent)
        # Set up the user interface from Designer through FORM_CLASS.
        # After self.setupUi() you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        
        self.pushButton_zlicz.clicked.connect(self.zlicz_obiekty)
        self.pushButton_dH.clicked.connect(self.dH)
        self.pushButton_pole.clicked.connect(self.poleGauss)
        
        
        
    def zlicz_obiekty(self):
        wybrana_warstwa = self.mMapLayerComboBox.currentLayer() # pobieranie inf. o obecnej warstwie
        lb_obiektow = wybrana_warstwa.featureCount() # zlicza obiekty
        self.label_wynik.setText(str(lb_obiektow)) # zmienia tekst wyswietlony na ekranie
        
    def dH(self):
        aktywna_warstwa = iface.activeLayer()
        self.label_wynik_aktywna.setText(aktywna_warstwa.name())
        lb_wyb_obiektow = aktywna_warstwa.selectedFeatureCount() 
        self.label_lb_ob.setText(str(lb_wyb_obiektow))
        
        if lb_wyb_obiektow == 2:
            h = []
            nr_pkt = []
            for pkt in aktywna_warstwa.selectedFeatures():
                nr_pkt.append(pkt['nr'])
                h.append(pkt['h'])
            dH = float(h[1]) - float(h[0])
            self.label_wynik_dH.setText(str(round(dH,5)))
        else:
            self.label_wynik_dH.setText('Zaznacz 2 punkty.')
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical) 
            msg.setText("Błąd!")
            msg.setInformativeText("Wybrano niewłaściwą ilość punktów! Wybierz dwa punkty.")
            msg.setWindowTitle("Error!")
            msg.exec_() 
           
    def poleGauss(self):
        aktywna_warstwa = iface.activeLayer()
        self.label_wynik_aktywna.setText(aktywna_warstwa.name())
        lb_wyb_obiektow = aktywna_warstwa.selectedFeatureCount() 
        self.label_lb_ob.setText(str(lb_wyb_obiektow))
        
        #wybrane_obiekty = aktywna_warstwa.selectedFeatures()
        
    
        if lb_wyb_obiektow > 2:
            
            X = []
            Y = []
            for pkt in aktywna_warstwa.selectedFeatures():
                X.append(pkt['x92'])
                Y.append(pkt['y92'])
            
            x = []
            y = []
            for el in range(len(X)):
                x.append(float(X[el]))
                y.append(float(Y[el]))
            
            x0 = (max(x)+min(x))/2
            y0 = (max(y)+min(y))/2
            
            def azym(x,y):
                
                dX = x - x0
                dY = y - y0
                
                azymut = math.atan2(dY,dX)

                if azymut <= 0:
                    azymut = (2*math.pi) + azymut
                return azymut
            
            XY_n = []
            for el in range(len(X)):
                azymut = azym(x[el], y[el])
                XY_n.append([x[el], y[el], azymut])
                
            XY = sorted(XY_n, key = operator.itemgetter(2))    
            X = []
            Y = []
            
            for el in range(len(XY)):
                xx = XY[el][0]
                X.append(xx)
                yy = XY[el][1]
                Y.append(yy)
                
            suma = 0
            
            for el in range(len(X)):
                if el == len(X)-1:
                    suma += (float(Y[0]) - float(Y[el-1]))*float(X[el])
                    
                elif el == 0:
                    suma += (float(Y[el+1]) - float(Y[-1]))*float(X[el])
                    
                else:
                    suma += (float(Y[el+1]) - float(Y[el-1]))*float(X[el])
    
            pole = suma/2
            self.label_wynik_p.setText(str(pole))
            
          
        else:
            self.label_wynik_p.setText('Zaznacz 3 punkty.')
            msg = QtWidgets.QMessageBox()
            msg.setIcon(QtWidgets.QMessageBox.Critical) 
            msg.setText("Błąd!")
            msg.setInformativeText("Wybrano niewłaściwą ilość punktów! Wybierz 3 punkty.")
            msg.setWindowTitle("Error!")
            msg.exec_() 
            
 
